# Organization structure models

"A department of the organization"
type org_Department @model(key: ["uid"]) {
  "A unique identifier for the department"
  uid: ID

  "Department's name"
  name: String

  "Department's description"
  description: String
}

"An employee of the organization"
type org_Employee @model(key: ["uid"]) {
  "A unique identifier for the employee"
  uid: ID

  "Employee title"
  title: String

  "The employee's department"
  department: org_Department @reference(back: "employees")

  "The employee's identity information"
  identity: identity_Identity @reference(back: "employee", unique: true)

  "The employee's manager"
  manager: org_Employee @reference(back: "reports")

  """
  The list of all UIDs in the employee's reporting chain, including the
  employee's. This field is useful to support transitive report filtering.
  """
  reportingChain: [String!]
}

"A team of employees"
type org_Team @model(key: ["uid"]) {
  "A unique identifier for the team"
  uid: ID

  "Team's name"
  name: String

  "Team's description"
  description: String

  "The employee leading the team"
  lead: org_Employee @reference(back: "teamsLed")

  "The Team's parent"
  parentTeam: org_Team @reference(back: "childTeams")

  """
  The list of all UIDs in the teams's chain, including the
  team's. This is the list of teams this team rolls up to. 
  This field is useful to support transitive report filtering.
  """
  teamChain: [String!]
}

"A record of team membership"
type org_TeamMembership @model(key:["team", "member"]) {
  "The team the employee is in"
  team: org_Team @reference(back: "members")

  "The employee member"
  member: org_Employee @reference(back: "teams")
}

"A record of application ownership"
type org_ApplicationOwnership @model(key: ["team", "application"]) {
  "The owned application. Each application can have at most one owner"
  application: compute_Application @reference(back: "ownership", unique: true)

  "The team owning the application"
  team: org_Team @reference(back: "applicationOwnerships")
}

"A record of project ownership"
type org_ProjectOwnership @model(key: ["team", "project"]) {
  "The owned project. Each project can have at most one owner"
  project: tms_Project @reference(back: "ownership", unique: true)

  "The team owning the project"
  team: org_Team @reference(back: "projectOwnerships")
}

"A record of repository ownership"
type org_RepositoryOwnership @model(key: ["team", "repository"]) {
  "The owned repository. Each repository can have at most one owner"
  repository: vcs_Repository @reference(back: "ownership", unique: true)

  "The team owning the repository"
  team: org_Team @reference(back: "repositoryOwnerships")
}

"A record of pipeline ownership"
type org_PipelineOwnership @model(key: ["team", "pipeline"]) {
  "The owned pipeline. Each pipeline can have at most one owner"
  pipeline: cicd_Pipeline @reference(back: "ownership", unique: true)

  "The team owning the pipeline"
  team: org_Team @reference(back: "pipelineOwnerships")
}
