"An organization / workspace / group for related VCS projects"
type vcs_Organization @model(key: ["uid", "source"]) {
  "Organization uid is unique within the source system, e.g GitHub"
  uid: String
  name: String
  htmlUrl: String
  type: vcs_OrgType
  source: String
  createdAt: Timestamp
}

"A user within the VCS system"
type vcs_User @model(key: ["uid", "source"]) {
  "User uid is unique within the source system, e.g GitHub"
  uid: ID
  name: String
  type: vcs_UserType
  htmlUrl: String
  source: String
}

"Many-to-many association between users and organizations"
type vcs_Membership @model(key: ["organization", "user"]) {
  organization: vcs_Organization @reference(back: "memberships")
  user: vcs_User @reference(back: "memberships")
}

"Repository within an organization"
type vcs_Repository @model(key: ["organization", "name"]) {
  name: String
  fullName: String
  private: Boolean
  description: String
  language: String
  size: Long
  mainBranch: String
  htmlUrl: String
  createdAt: Timestamp
  updatedAt: Timestamp

  "Organization to which the repository belongs"
  organization: vcs_Organization @reference(back: "repositories")
}

"A record of a commit in a repository"
type vcs_Commit @model(key: ["repository", "sha"]) {
  sha: String
  message: String
  htmlUrl: String
  createdAt: Timestamp
  author: vcs_User @reference(back: "authoredCommits")
  repository: vcs_Repository @reference(back: "commits")
}

"A pull request aka merge request"
type vcs_PullRequest @model(key: ["repository", "number"]) {
  number: Int
  title: String
  state: vcs_PullRequestState
  htmlUrl: String
  createdAt: Timestamp
  updatedAt: Timestamp
  mergedAt: Timestamp
  commitCount: Int
  commentCount: Int
  diffStats: vcs_DiffStats

  "User who authored the pull request"
  author: vcs_User @reference(back: "authoredPullRequests")

  """
  Commit associated with the pull request. Refer to your VCS
  documentation on how the merge_commit_sha is populated
  """
  mergeCommit: vcs_Commit @reference(back: "mergedPullRequest")

  "The repository the pull request was created in"
  repository: vcs_Repository @reference(back: "pullRequests")
}

type vcs_DiffStats {
  linesAdded: Int
  linesDeleted: Int
  filesChanged: Int
}

"A pull request review"
type vcs_PullRequestReview @model(key: ["pullRequest", "number"]) {
  number: Long
  htmlUrl: String
  state: vcs_PullRequestReviewState
  submittedAt: Timestamp

  "User who reviewed the pull request"
  reviewer: vcs_User @reference(back: "pullRequestReviews")

  "Pull request associated with this review"
  pullRequest: vcs_PullRequest @reference(back: "reviews")
}

"A comment on a pull request"
type vcs_PullRequestComment @model(key: ["pullRequest", "number"]) {
  number: Long
  comment: String
  createdAt: Timestamp
  updatedAt: Timestamp

  "User who authored the comment on this pull request"
  author: vcs_User @reference(back: "pullRequestComments")

  "Pull request associated with this comment"
  pullRequest: vcs_PullRequest @reference(back: "comments")
}

"A tag marking a point/commit in a repository's history."
type vcs_Tag @model(key: ["repository", "name"]) {
  name: String
  message: String

  "Commit associated with this tag"
  commit: vcs_Commit @reference(back: "tags")

  "Repository associated with this tag"
  repository: vcs_Repository @reference(back: "tags")
}

"The type of organization such as Github organization or BitBucket workspace"
type vcs_OrgType {
  category: vcs_OrgTypeCategory
  detail: String
}

enum vcs_OrgTypeCategory {
  Organization
  Workspace
  Group
  Custom
}

"The type user in the VCS"
type vcs_UserType {
  category: vcs_UserTypeCategory
  detail: String
}

enum vcs_UserTypeCategory {
  Bot
  Organization
  User
  Custom
}

"The status of a pull request"
type vcs_PullRequestState {
  category: vcs_PullRequestStateCategory
  detail: String
}

enum vcs_PullRequestStateCategory {
  Closed
  Merged
  Open
  Custom
}

"The status of a pull request review"
type vcs_PullRequestReviewState {
  category: vcs_PullRequestReviewStateCategory
  detail: String
}

enum vcs_PullRequestReviewStateCategory {
  Approved
  Commented
  ChangesRequested
  Dismissed
  Custom
}
